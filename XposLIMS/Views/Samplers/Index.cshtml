@model XposLIMS.Models.SamplersViewModel

@Html.AntiForgeryToken()

@(Html.Kendo().Grid<XposLIMS.Models.Sampler>()
    .Name("samplers_grid")

    .Columns(columns =>
    {
        columns.Bound(p => p.SamplerID);
        columns.Bound(p => p.IDNumb);
        columns.Bound(p => p.SamplerName);
        columns.Bound(p => p.IsActive);
        columns.Command(cmd =>
        {
            cmd.Edit().HtmlAttributes(new { title = "Edit" });
            //cmd.Destroy().HtmlAttributes(new { title = "Delete" });
            cmd.Custom("Remove").Click("grid_onDelete").HtmlAttributes(new { @class = "k-grid-remove", title = "Delete" });
        }).Title("Commands").Width(90);

    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .DataSource(dataSource =>dataSource
        .Ajax()
        .PageSize(15)
        .Events(events => events.Error("grid_error")) // Handle the "error" event
        .Model(model =>
        {
            model.Id(m => m.SamplerID);
            model.Field(m => m.SamplerID).Editable(false);
        })
        .Create(create => create.Action("Samplers_Create", "Samplers").Data("grid_sendAntiForgery"))
        .Read(read => read.Action("Samplers_Read", "Samplers").Data("grid_sendAntiForgery"))
        .Update(up => up.Action("Samplers_Update", "Samplers").Data("grid_sendAntiForgery"))
        .Destroy(destroy => destroy.Action("Samplers_Destroy", "Samplers").Data("grid_sendAntiForgery"))

      )
    .Pageable()
    .Sortable()
    .Filterable()
    .Events(e => e.Edit("grid_onEdit"))
)
