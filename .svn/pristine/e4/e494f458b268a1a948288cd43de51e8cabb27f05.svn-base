using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web.Mvc;
using XposLIMS.Models;

namespace XposLIMS.Controllers
{
    public class SamplersController : Controller
    {
        private readonly XposLIMSEntities _db = new XposLIMSEntities();

        public SamplersController(){}

        // GET: Samplers
        public ActionResult Index()
        {
            var samplers = from m in _db.Samplers
                select m;

            var samplerVM = new SamplersViewModel()
            {
                samplers = samplers.ToList(),
                ModuleName = "Samplers"
            };
            return View(samplerVM);
        }

        
        // GET: Samplers/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Sampler sampler = _db.Samplers.Find(id);
            if (sampler == null)
            {
                return HttpNotFound();
            }
            return View(sampler);
        }

        // GET: Samplers/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Samplers/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "IDNumb,SamplerName")] Sampler sampler)
        {
            if (ModelState.IsValid)
            {
                sampler.DateCreated = DateTime.Now;
                sampler.LastModified = DateTime.Now;
                sampler.IsActive = true;

                _db.Samplers.Add(sampler);
                _db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(sampler);
        }

        // GET: Samplers/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Sampler sampler = _db.Samplers.Find(id);
            if (sampler == null)
            {
                return HttpNotFound();
            }
            return View(sampler);
        }

        // POST: Samplers/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "SamplerID,IDNumb,SamplerName,IsActive")] Sampler sampler)
        {
            if (ModelState.IsValid)
            {
                _db.Entry(sampler).State = EntityState.Modified;
                _db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(sampler);
        }

        // GET: Samplers/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Sampler sampler = _db.Samplers.Find(id);
            if (sampler == null)
            {
                return HttpNotFound();
            }
            return View(sampler);
        }

        // POST: Samplers/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Sampler sampler = _db.Samplers.Find(id);
            _db.Samplers.Remove(sampler);
            _db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _db.Dispose();
            }
            base.Dispose(disposing);
        }

        [ValidateAntiForgeryToken]
        public ActionResult Samplers_Create([DataSourceRequest]DataSourceRequest dsRequest, Sampler sampler)
        {
            if (ModelState.IsValid)
            {
                using (var ctx = new XposLIMSEntities())
                {
                    var entity = new Sampler
                    {
                        IDNumb = sampler.IDNumb,
                        SamplerName = sampler.SamplerName
                    };
                    ctx.Samplers.Add(entity);
                    ctx.SaveChanges();
                    // Get the SamplerID generated by the database
                    sampler.SamplerID = entity.SamplerID;
                }
            }
            // Return the inserted sampler. The grid needs the generated SamplerID. Also return any validation errors.
            return Json(new[] { sampler }.ToDataSourceResult(dsRequest, ModelState));
        }

        [ValidateAntiForgeryToken]
        public ActionResult Samplers_Read([DataSourceRequest] DataSourceRequest dsRequest)
        {
            var result = _db.Samplers.ToDataSourceResult(dsRequest);
            return Json(result);
        }

        [ValidateAntiForgeryToken]
        public ActionResult Samplers_Update([DataSourceRequest] DataSourceRequest dsRequest, Sampler sampler)
        {
            if (sampler != null && ModelState.IsValid)
            {
                var toUpdate = _db.Samplers.FirstOrDefault(p => p.SamplerID == sampler.SamplerID);
                TryUpdateModel(toUpdate);
            }
            return Json(new[] { sampler }.ToDataSourceResult(dsRequest, ModelState));
        }

        public ActionResult Samplers_Destroy([DataSourceRequest]DataSourceRequest dsRequest, Sampler sampler)
        {
            if (ModelState.IsValid)
            {
                using (var ctx = new XposLIMSEntities())
                {
                    var entity = new Sampler
                    {
                        SamplerID=sampler.SamplerID,
                        IDNumb = sampler.IDNumb,
                        SamplerName = sampler.SamplerName
                    };
                    // Attach the entity
                    ctx.Samplers.Attach(entity);
                    // Delete the entity
                    ctx.Samplers.Remove(entity);
                    // Or use DeleteObject if using a previous versoin of Entity Framework
                    // northwind.Products.DeleteObject(entity);
                    // Delete the entity in the database
                    ctx.SaveChanges();
                }
            }
            // Return the removed product. Also return any validation errors.
            return Json(new[] { sampler }.ToDataSourceResult(dsRequest, ModelState));
        }
    }
}
